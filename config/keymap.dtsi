#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h> 
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>



#define DEF 0
#define LOW 1
#define RSE 2
#define ADJ 3


&sk {
    release-after-ms = <500>;
};

&caps_word {};

/ {
        conditional_layers {
          compatible = "zmk,conditional-layers";
          tri_layer {
              if-layers = <LOW RSE>;
              then-layer = <ADJ>;
          };
        };

        combos {
          compatible = "zmk,combos";
          combo_esc {
              timeout-ms = <50>;
              key-positions = <24 35>; // LSFT + RSHFT
              bindings = <&caps_word>;
          };
        };
          
        behaviors {
            lt_qk: layer_toggle_quick {
                compatible = "zmk,behavior-hold-tap";
                label = "LAYER_TOGGLE_QUICK";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <150>;
                quick-tap-ms = <150>;
                bindings = <&mo>, <&kp>;
            };
            mt_sk: mod_tap_sticky {
              compatible = "zmk,behavior-hold-tap";
              label = "MOD_TAP_STICKY";
              #binding-cells = <2>;
              flavor = "tap-preferred";
              tapping-term-ms = <150>;
              quick-tap-ms = <150>;
              bindings = <&sk>, <&kp>;
          };
          ht: hold_tap {
              compatible = "zmk,behavior-hold-tap";
              label = "HOLD_TAP";
              #binding-cells = <2>;
              tapping_term_ms = <175>;
              quick_tap_ms = <150>;
              flavor = "tap-preferred";
              bindings = <&kp>, <&kp>;
          };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q        |  W       |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | "|"  |
// |  ESC |  A        |  S       |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  LCTRL/Z  |  LALT/X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | SPC | BKSP/LWR |   | RSE | ENT  | ALT |
                        bindings = <
   &kp TAB   &ht N1 Q        &ht N2 W       &ht N3 E &ht N4 R &ht N5 T   &ht N6 Y &ht N7 U  &ht N8 I     &ht N9 O           &ht N0 P             &kp PIPE
   &kp ESC   &kp A          &kp S         &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L           &kp SEMI          &kp SQT
   &sk LSHFT &mt_sk LCTRL Z &mt_sk LALT X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &mt_sk RALT DOT &mt_sk RCTRL FSLH &sk RSHFT
                  &sk LGUI &kp SPACE &lt_qk LOW BKSP        &lt_qk RSE DEL  &kp RET &sk RGUI
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &trans  &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &trans  &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	      &trans &trans   &trans   &trans   &trans    &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1     &kp N2     &kp N3     &kp N4     &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &trans
   &trans     &kp F1     &kp F2     &kp F3     &kp F4     &kp F5         &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &trans     &kp F6     &kp F7     &kp F8     &kp F9     &kp F10        &trans   &trans   &trans &trans    &trans &trans
                    	   &trans &trans   &trans   &trans   &trans    &trans
                        >;
                };

                adjust_layer {
// -----------------------------------------------------------------------------------------
// | BOOT  |           |      |      |      |      |      |      |      |      |      |      | BOOT  |
// | RESET |  RGB_TOG  |      |      |      |      |      |      |      |      |      |      | RESET |
// | BTCLR |  BT1      | BT2  | BT 3 | BT4  | BT5  |      |      |      |      |      |      |       |
//                 |     |     |     |        |      |     |     |
                        bindings = <
   &bootloader &rgb_ug RGB_TOG &rgb_ug RGB_HUI  &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_SPI             &out OUT_TOG &trans &trans &trans &trans &bootloader
   &reset      &rgb_ug RGB_EFF &rgb_ug RGB_HUD  &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_SPD             &trans       &trans &trans &trans &trans &reset
   &bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 1     &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                &trans       &trans &trans &trans &trans &trans
                                                              &ext_power EP_TOG &trans &trans               &trans       &trans &ext_power EP_TOG 
                        >;
                };
       };  
};
